name: Check CHANGELOG.md has been written.

on:
  workflow_call:
    secrets:
      comment_token:
        required: true

jobs:
  check-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Check if github-token is set
        run: |
          if [ -z "${{ secrets.comment_token }}" ]
          then
            echo "${{ secrets.comment_token }}"
            echo "Error: COMMENT_TOKEN is not set." >&2
            exit 1
          fi

      - uses: actions/checkout@v3

      - name: Get changed files
        uses: actions/github-script@v4
        id: files
        with:
          github-token: ${{ secrets.comment_token }}
          script: |
            const { data: pullRequest } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const { data: files } = await github.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const hasChangelog = files.some(file => file.filename === 'CHANGELOG.md');
            if (!hasChangelog) {
              console.log('CHANGELOG.md not found in pull request files');
              console.log('Please update the CHANGELOG.md file.');
              const comment = `
              ðŸ¤  Please update the **CHANGELOG.md** file.
              > Keep on going sir, next time do not break the rules ðŸ«¡
              `;
              core.setOutput('comment', comment);
            }

      - name: Add comment
        uses: actions/github-script@v4
        if: ${{ steps.files.outputs.comment }}
        with:
          github-token: ${{ secrets.comment_token }}
          script: |
            const { data: comments } = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const commentBody = `${{ steps.files.outputs.comment }}`;
            const existingComment = comments.find((comment) => comment.body.includes(commentBody));
            if (!existingComment) {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
